package edu.jorbonism.nfclanders

import android.app.PendingIntent
import android.content.Intent
import android.content.IntentFilter
import android.nfc.NfcAdapter
import android.nfc.Tag
import android.nfc.tech.MifareClassic
import android.nfc.tech.NdefFormatable
import android.nfc.tech.NfcA
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import edu.jorbonism.nfclanders.ui.theme.NFCLandersTheme

class MainActivity : ComponentActivity() {

    private val nfcAdapter: NfcAdapter? by lazy {
        NfcAdapter.getDefaultAdapter(this)
    }
    private var pendingIntent: PendingIntent? = null
    private var connection = TagConnectionNFC()


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            NFCLandersTheme {
                NFCLandersApp()
            }
        }

        if (nfcAdapter == null) {
            Toast.makeText(this, "Could not get NFC adapter!", Toast.LENGTH_SHORT).show()
        } else if (!nfcAdapter!!.isEnabled) {
            Toast.makeText(this, "Turn on NFC!", Toast.LENGTH_SHORT).show()
        }

        val intent = Intent(this, javaClass).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
        pendingIntent = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_MUTABLE)
        } else {
            PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE)
        }

        val connection = TagConnectionDump()
        val dump = ByteArray(1024)
        arrayOf(0x04, 0x70, 0x3d, 0xb8, 0xf1, 0x81, 0x01, 0x0f, 0xc4, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x54, 0x71, 0x90, 0x87, 0x2c, 0x3a, 0x00, 0x00, 0x01, 0x18, 0x1f, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xad, 0x0f, 0xdf, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x7d, 0x0c, 0x2f, 0x4a, 0xe8, 0xf1, 0x50, 0xb1, 0x4d, 0x8f, 0x01, 0x05, 0xdf, 0xb6, 0x33, 0xc3, 0xd9, 0xbc, 0x94, 0x62, 0x89, 0x08, 0x72, 0x2c, 0x5e, 0x29, 0xd1, 0xa5, 0x1b, 0xf3, 0x6b, 0x3e, 0x20, 0x33, 0x52, 0x9f, 0x1d, 0xb3, 0xd8, 0x92, 0x3f, 0xbb, 0xbd, 0x3b, 0x41, 0xd0, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x5e, 0x4a, 0x0e, 0xa4, 0x42, 0x4c, 0x58, 0x32, 0x87, 0xdd, 0x36, 0x29, 0x9c, 0xdf, 0xf4, 0xda, 0x9e, 0x57, 0x82, 0xde, 0xf3, 0x1a, 0x1e, 0x83, 0x9b, 0xb7, 0x9e, 0xe4, 0x43, 0xb6, 0xd4, 0xce, 0x91, 0x58, 0xf6, 0x96, 0x64, 0x3f, 0x94, 0x1c, 0x51, 0x0d, 0x09, 0x72, 0xdd, 0xfb, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xaf, 0x5b, 0x0e, 0x4a, 0xea, 0x66, 0x3c, 0x51, 0x81, 0xd7, 0xda, 0x72, 0xc4, 0xd2, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x62, 0xae, 0x7b, 0x8a, 0x1e, 0xd9, 0x54, 0xb1, 0xac, 0xb9, 0x93, 0xe6, 0x76, 0xf6, 0xd2, 0xb5, 0x92, 0xe4, 0x41, 0x36, 0x79, 0x79, 0xd5, 0x75, 0xf2, 0x73, 0x83, 0xde, 0x93, 0x3a, 0xe5, 0x0f, 0x61, 0x6f, 0x98, 0x97, 0x59, 0x61, 0x37, 0xc1, 0x81, 0x2c, 0x2a, 0x5c, 0x69, 0xcd, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x56, 0x0e, 0xb3, 0x90, 0x19, 0xfc, 0xaa, 0xb8, 0x6b, 0x8b, 0xe0, 0x4d, 0x57, 0xb5, 0x9b, 0x19, 0xaf, 0x1d, 0x94, 0x71, 0xaf, 0x5a, 0x69, 0x1b, 0xac, 0xf9, 0xc2, 0xa5, 0x2d, 0x45, 0x56, 0x02, 0x90, 0xe7, 0x66, 0xff, 0xd6, 0x07, 0x62, 0x88, 0xed, 0x18, 0x99, 0x2e, 0x77, 0x5d, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5b, 0x84, 0x03, 0xfb, 0xe2, 0x44, 0x40, 0xa0, 0x6c, 0xac, 0x63, 0xbe, 0x3d, 0xb9, 0x68, 0xb0, 0x43, 0x70, 0xe6, 0xcf, 0xdd, 0x2a, 0x75, 0x3f, 0xe9, 0x07, 0x34, 0xd6, 0x16, 0x77, 0x30, 0x1a, 0x5a, 0x59, 0x66, 0x9d, 0x63, 0x2b, 0x7d, 0xf5, 0xbb, 0xbd, 0x93, 0x14, 0x05, 0xe4, 0x38, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x53, 0x54, 0xac, 0xb1, 0x14, 0xe8, 0xbc, 0x30, 0x1e, 0x12, 0xd5, 0xeb, 0x9e, 0x3d, 0xf9, 0x77, 0x56, 0x95, 0x7d, 0x96, 0x09, 0x2a, 0x00, 0x9a, 0x5f, 0x47, 0x88, 0xc3, 0x1d, 0x71, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            .forEachIndexed { i, v ->
            dump[i] = v.toByte()
        }
        connection.open(dump)

        val contents = TagContents.readFromConnection(connection)?: return

        Log.i(null, "${contents.header?.toyType?.name}")

        Log.i(null, "Region count A: ${contents.dataA?.regionCountID}")
        Log.i(null, "AS: ${contents.dataA?.areaSequence0}, ${contents.dataA?.areaSequence1}")
        Log.i(null, "Nickname: ${contents.dataA?.nickname}")
        Log.i(null, "Money: ${contents.dataA?.money}")
        Log.i(null, "Hat: ${contents.dataA?.hat?.name}")
        Log.i(null, "Upgrades: ${contents.dataA?.upgrades}")
        Log.i(null, "Write time: ${contents.dataA?.writeTime}")
        Log.i(null, "Reset time: ${contents.dataA?.resetTime}")

        Log.i(null, "Region count B: ${contents.dataB?.regionCountID}")
        Log.i(null, "AS: ${contents.dataB?.areaSequence0}, ${contents.dataB?.areaSequence1}")
        Log.i(null, "Nickname: ${contents.dataB?.nickname}")
        Log.i(null, "Money: ${contents.dataB?.money}")
        Log.i(null, "Hat: ${contents.dataB?.hat?.name}")
        Log.i(null, "Upgrades: ${contents.dataB?.upgrades}")
        Log.i(null, "Write time: ${contents.dataB?.writeTime}")
        Log.i(null, "Reset time: ${contents.dataB?.resetTime}")

    }

    override fun onResume() {
        super.onResume()
        nfcAdapter?.enableForegroundDispatch(
            this,
            pendingIntent,
            arrayOf(
                IntentFilter(NfcAdapter.ACTION_TECH_DISCOVERED),
            ),
            arrayOf(
                arrayOf(
                    NfcA::class.java.name,
                    NdefFormatable::class.java.name,
                    MifareClassic::class.java.name,
                ),
            ),
        )
    }

    override fun onPause() {
        if (this.isFinishing) {
            nfcAdapter?.disableForegroundDispatch(this)
        }
        super.onPause()
    }

    override fun onDestroy() {
        connection.reset()
        super.onDestroy()
    }

    override fun onNewIntent(intent: Intent?) {
        super.onNewIntent(intent)
        if (NfcAdapter.ACTION_TECH_DISCOVERED == intent?.action) {
            connection.open(if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                intent.getParcelableExtra(NfcAdapter.EXTRA_TAG, Tag::class.java)
            } else {
                intent.getParcelableExtra<Tag>(NfcAdapter.EXTRA_TAG)
            } ?: return)


            val contents = TagContents.readFromConnection(connection)?: return

            Log.i(null, "${contents.header?.toyType?.name}")

            Log.i(null, "Region count A: ${contents.dataA?.regionCountID}")
            Log.i(null, "AS: ${contents.dataA?.areaSequence0}, ${contents.dataA?.areaSequence1}")
            Log.i(null, "Nickname: ${contents.dataA?.nickname}")
            Log.i(null, "Money: ${contents.dataA?.money}")
            Log.i(null, "Hat: ${contents.dataA?.hat?.name}")
            Log.i(null, "Upgrades: ${contents.dataA?.upgrades}")
            Log.i(null, "Write time: ${contents.dataA?.writeTime}")
            Log.i(null, "Reset time: ${contents.dataA?.resetTime}")

            Log.i(null, "Region count B: ${contents.dataB?.regionCountID}")
            Log.i(null, "AS: ${contents.dataB?.areaSequence0}, ${contents.dataB?.areaSequence1}")
            Log.i(null, "Nickname: ${contents.dataB?.nickname}")
            Log.i(null, "Money: ${contents.dataB?.money}")
            Log.i(null, "Hat: ${contents.dataB?.hat?.name}")
            Log.i(null, "Upgrades: ${contents.dataB?.upgrades}")
            Log.i(null, "Write time: ${contents.dataB?.writeTime}")
            Log.i(null, "Reset time: ${contents.dataB?.resetTime}")

        }
    }
}

